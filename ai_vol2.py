# -*- coding: utf-8 -*-
"""ai-vol2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/kheddaoui1/d2365b5b7682c4c43080eb55e5e4d4e0/ai-vol2.ipynb

**random** forest
"""

# === SETUP ===
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_predict
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# === STEP 2: LOAD DATA ===
df = pd.read_csv('Final data alll.csv')
df = df.dropna(subset=['EffSysC'])  # drop rows where EffSysC is NaN

# === STEP 3: SELECT FEATURES AND TARGET ===
features = ['T_Amb', 'GlobHor', 'WindVel']
target = 'EffSysC'

X = df[features]
y = df[target]

# === STEP 4: MODEL SETUP ===
model = RandomForestRegressor(n_estimators=100, random_state=42)

# === STEP 5: CROSS-VALIDATION ===
# Predict with 5-fold cross-validation
y_pred = cross_val_predict(model, X, y, cv=5)

# Evaluation metrics
mae = mean_absolute_error(y, y_pred)
rmse = np.sqrt(mean_squared_error(y, y_pred))
r2 = r2_score(y, y_pred)

print(f"Cross-validated MAE: {mae:.4f}")
print(f"Cross-validated RMSE: {rmse:.4f}")
print(f"Cross-validated R²: {r2:.4f}")

# === STEP 6: VISUALIZATION ===
plt.figure(figsize=(10, 6))
plt.scatter(y, y_pred, alpha=0.6)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.xlabel('Actual EffSysC')
plt.ylabel('Predicted EffSysC')
plt.title('Cross-Validated Prediction: Actual vs Predicted EffSysC')
plt.grid(True)
plt.show()

# === STEP 7: FEATURE IMPORTANCE ===
# Train the model to access feature importances
model.fit(X, y)

# Get feature importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.title("Feature Importance (RandomForestRegressor)")
plt.barh(range(len(importances)), importances[indices], align="center")
plt.yticks(range(len(importances)), [features[i] for i in indices])  # Use feature names
plt.xlabel("Importance")
plt.tight_layout()
plt.show()



"""**predict using random forest**"""

# === SAVE THE TRAINED MODEL ===
# After training your model, save it to a file
import joblib
joblib.dump(model, 'random_forest_effsysc_model.joblib')

# === LOAD THE MODEL FOR LATER USE ===
# In a new script or session:
import pandas as pd
import joblib
from sklearn.ensemble import RandomForestRegressor
loaded_model = joblib.load('random_forest_effsysc_model.joblib')

# === USING THE MODEL FOR PREDICTIONS ===
# Example 1: Predict for a single new data point
new_data_point = pd.DataFrame({
    'T_Amb': [25.0],      # Ambient temperature
    'GlobHor': [3],     # Global Horizontal irradiance
    'WindVel': [3.5]      # Wind velocity
})

# Apply business rule: If GlobHor is 0, efficiency should be 0
if new_data_point['GlobHor'].iloc[0] == 0:
    prediction = 0.0
else:
    prediction = loaded_model.predict(new_data_point)[0]

print(f"Predicted EffSysC: {prediction:.4f}")

"""**xgboost**

"""



# === SETUP ===
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import xgboost as xgb
import seaborn as sns

# === STEP 2: LOAD DATA ===
df = pd.read_csv('Final data alll.csv')
df = df.dropna(subset=['EffSysC'])  # drop rows where EffSysC is NaN

# === STEP 3: SELECT FEATURES AND TARGET ===
features = ['T_Amb', 'GlobHor','WindVel']
target = 'EffSysC'

X = df[features]
y = df[target]

# === STEP 4: TRAIN/TEST SPLIT ===
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === STEP 5: MODEL SETUP AND TRAINING ===
# Initialize XGBoost regressor
model = xgb.XGBRegressor(
    objective='reg:squarederror',
    n_estimators=100,
    learning_rate=0.1,
    max_depth=5,
    random_state=42
)

# Train the model
model.fit(X_train, y_train)

# Make predictions on both train and test sets
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Evaluation metrics on training set
train_mae = mean_absolute_error(y_train, y_train_pred)
train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))
train_r2 = r2_score(y_train, y_train_pred)

print(f"Training set MAE: {train_mae:.4f}")
print(f"Training set RMSE: {train_rmse:.4f}")
print(f"Training set R²: {train_r2:.4f}")

# Evaluation metrics on test set
test_mae = mean_absolute_error(y_test, y_test_pred)
test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))
test_r2 = r2_score(y_test, y_test_pred)

print(f"\nTest set MAE: {test_mae:.4f}")
print(f"Test set RMSE: {test_rmse:.4f}")
print(f"Test set R²: {test_r2:.4f}")

# === STEP 6: VISUALIZATION ===
plt.figure(figsize=(14, 6))

# Training set visualization
plt.subplot(1, 2, 1)
plt.scatter(y_train, y_train_pred, alpha=0.6)
plt.plot([y_train.min(), y_train.max()], [y_train.min(), y_train.max()], 'r--')
plt.xlabel('Actual EffSysC')
plt.ylabel('Predicted EffSysC')
plt.title(f'Training Set: Actual vs Predicted\nR² = {train_r2:.4f}')
plt.grid(True)

# Test set visualization
plt.subplot(1, 2, 2)
plt.scatter(y_test, y_test_pred, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel('Actual EffSysC')
plt.ylabel('Predicted EffSysC')
plt.title(f'Test Set: Actual vs Predicted\nR² = {test_r2:.4f}')
plt.grid(True)

plt.tight_layout()
plt.show()

# === STEP 7: FEATURE IMPORTANCE (XGBoost Specific) ===
plt.figure(figsize=(10, 6))
xgb.plot_importance(model)
plt.title('Feature Importance in XGBoost Model')
plt.tight_layout()
plt.show()
# Compute correlation matrix
corr_matrix = df[features + [target]].corr()

# Plot heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", square=True)
plt.title('Feature Correlation Heatmap')
plt.tight_layout()
plt.show()

# === STEP 7: FEATURE IMPORTANCE (Improved Visualization) ===
importances = model.feature_importances_
feature_names = X.columns

# Create a DataFrame for better control
importance_df = pd.DataFrame({
    'Feature': feature_names,
    'Importance': importances
}).sort_values(by='Importance', ascending=True)

# Plot
plt.figure(figsize=(8, 5))
sns.barplot(x='Importance', y='Feature', data=importance_df, palette='viridis')
plt.title('Feature Importance')
plt.xlabel('Relative Importance')
plt.ylabel('Feature')
plt.grid(True, axis='x')
plt.tight_layout()
plt.show()

# === CORRELATION BAR PLOT ===
# Calculate correlations with the target
corr_with_target = df[features + [target]].corr()[target].drop(target)  # remove self-correlation

# Convert to DataFrame for seaborn plotting
corr_df = corr_with_target.sort_values().reset_index()
corr_df.columns = ['Feature', 'Correlation']

# Plot
plt.figure(figsize=(8, 5))
sns.barplot(x='Correlation', y='Feature', data=corr_df, palette='coolwarm', orient='h')
plt.title('Correlation with EffSysC')
plt.xlabel('Pearson Correlation')
plt.ylabel('Feature')
plt.grid(True, axis='x')
plt.tight_layout()
plt.show()

"""test the model"""

# Example 1: Predict for a single new data point
new_data_point = pd.DataFrame({
    'T_Amb': [10.0],      # Ambient temperature
    'GlobHor': [4],       # Global Horizontal irradiance
    'WindVel': [3.5]      # Wind velocity
})

if new_data_point['GlobHor'].iloc[0] == 0:
    prediction = 0.0
else:
    prediction = loaded_model.predict(new_data_point)[0]

print(f"Predicted EffSysC: {prediction:.4f}")

"""**Linear Regression**"""

# === SETUP ===
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_predict
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# === STEP 2: LOAD DATA ===
df = pd.read_csv('Final data alll.csv')
df = df.dropna(subset=['EffSysC'])  # drop rows where EffSysC is NaN

# === STEP 3: SELECT FEATURES AND TARGET ===
features = ['T_Amb', 'GlobHor', 'WindVel']
target = 'EffSysC'

X = df[features]
y = df[target]

# === STEP 4: CREATE THE LINEAR REGRESSION MODEL ===
model = LinearRegression()

# === STEP 5: CROSS-VALIDATION ===
# Predict with 5-fold cross-validation
y_pred = cross_val_predict(model, X, y, cv=5)

# Evaluation metrics
mae = mean_absolute_error(y, y_pred)
rmse = np.sqrt(mean_squared_error(y, y_pred))
r2 = r2_score(y, y_pred)

print(f"Cross-validated MAE: {mae:.4f}")
print(f"Cross-validated RMSE: {rmse:.4f}")
print(f"Cross-validated R²: {r2:.4f}")

# === STEP 6: VISUALIZATION ===
plt.figure(figsize=(10, 6))
plt.scatter(y, y_pred, alpha=0.6)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.xlabel('Actual EffSysC')
plt.ylabel('Predicted EffSysC')
plt.title('Cross-Validated Prediction: Actual vs Predicted EffSysC')
plt.grid(True)
plt.show()

# === STEP 7: FIT MODEL ON FULL DATA TO GET COEFFICIENTS ===
model.fit(X, y)

# Get model parameters
coefficients = model.coef_
intercept = model.intercept_

# Print coefficients and intercept
print("\nModel Coefficients:")
for feature, coef in zip(features, coefficients):
    print(f"  {feature}: {coef:.4f}")
print(f"Intercept: {intercept:.4f}")


# Save the trained model
import joblib
joblib.dump(model, 'linear_regression_effsysc_model.joblib')

# === STEP 8: PRINT REGRESSION FORMULA ===
equation = "EffSysC = "
terms = [f"({coef:.4f} * {feature})" for feature, coef in zip(features, coefficients)]
equation += " + ".join(terms)
equation += f" + ({intercept:.4f})"
print("\nRegression Formula:")
print(equation)

plt.figure(figsize=(10, 6))
plt.barh(features, coefficients)
plt.xlabel('Coefficient Value')
plt.title('Feature Importance (Linear Regression)')
plt.tight_layout()
plt.show()

import pandas as pd
from sklearn.linear_model import LinearRegression

# Load the trained model (if saved earlier)
import joblib
model = joblib.load('linear_regression_effsysc_model.joblib')

# Function to predict EffSysC for a given set of input parameters
def predict_effsysc(T_Amb, GlobHor, WindVel):
    # Create a DataFrame with the input parameters
    new_data_point = pd.DataFrame({
        'T_Amb': [T_Amb],      # Ambient temperature
        'GlobHor': [GlobHor],  # Global Horizontal irradiance
        'WindVel': [WindVel]   # Wind velocity
    })

    # Predict using the trained model
    prediction = model.predict(new_data_point)[0]

    return prediction

# Example: Make a prediction
T_Amb = 25.0  # Example Ambient temperature
GlobHor = 3   # Example Global Horizontal irradiance
WindVel = 3.5 # Example Wind velocity

predicted_effsysc = predict_effsysc(T_Amb, GlobHor, WindVel)
print(f"Predicted EffSysC: {predicted_effsysc:.4f}")

from sklearn.model_selection import train_test_split

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and fit Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
train_pred_cv = cross_val_predict(model, X_train, y_train, cv=5)  # Cross-validated on training data
test_pred = model.predict(X_test)  # Regular prediction on test set

plt.figure(figsize=(12, 5))

# === Training set plot (cross-validated) ===
plt.subplot(1, 2, 1)
plt.scatter(y_train, train_pred_cv, alpha=0.6, color='blue')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.xlabel('Actual EffSysC')
plt.ylabel('Predicted EffSysC')
plt.title('Training Set (Linear Regression, Cross-Validated)')
plt.grid(True)

# === Test set plot ===
plt.subplot(1, 2, 2)
plt.scatter(y_test, test_pred, alpha=0.6, color='green')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.xlabel('Actual EffSysC')
plt.ylabel('Predicted EffSysC')
plt.title('Test Set (Linear Regression)')
plt.grid(True)

plt.tight_layout()
plt.show()

"""** *italicized text*KNN Regression**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_predict
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib

# === LOAD DATA ===
df = pd.read_csv('Final data alll.csv')
df = df.dropna(subset=['EffSysC'])  # drop rows where EffSysC is NaN

# === SELECT FEATURES AND TARGET ===
features = ['T_Amb', 'GlobHor', 'WindVel']
target = 'EffSysC'

X = df[features]
y = df[target]

# === CREATE AND TRAIN THE KNN MODEL ===
model = KNeighborsRegressor(n_neighbors=5)  # You can adjust n_neighbors
model.fit(X, y)

# === EVALUATION ===
y_pred = model.predict(X)

# Evaluation metrics
mae = mean_absolute_error(y, y_pred)
rmse = np.sqrt(mean_squared_error(y, y_pred))
r2 = r2_score(y, y_pred)

print(f"MAE: {mae:.4f}")
print(f"RMSE: {rmse:.4f}")
print(f"R²: {r2:.4f}")

# === VISUALIZATION ===
# Plotting Actual vs Predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y, y_pred, alpha=0.6)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.xlabel('Actual EffSysC')
plt.ylabel('Predicted EffSysC')
plt.title('KNN Prediction: Actual vs Predicted EffSysC')
plt.grid(True)
plt.show()

# === SAVE THE TRAINED KNN MODEL ===
joblib.dump(model, 'knn_effsysc_model.joblib')

# === PREDICTION FUNCTION ===
# Function to predict EffSysC for a given set of input parameters
def predict_effsysc_knn(T_Amb, GlobHor, WindVel):
    new_data_point = pd.DataFrame({
        'T_Amb': [T_Amb],      # Ambient temperature
        'GlobHor': [GlobHor],  # Global Horizontal irradiance
        'WindVel': [WindVel]   # Wind velocity
    })

    # Predict using the trained KNN model
    prediction = model.predict(new_data_point)[0]

    return prediction

# Example: Make a prediction
T_Amb = 25.0  # Example Ambient temperature
GlobHor = 3   # Example Global Horizontal irradiance
WindVel = 3.5 # Example Wind velocity

predicted_effsysc = predict_effsysc_knn(T_Amb, GlobHor, WindVel)
print(f"Predicted EffSysC using KNN: {predicted_effsysc:.4f}")

"""**Support Vector Regression**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_predict
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib

# === LOAD DATA ===
df = pd.read_csv('Final data alll.csv')
df = df.dropna(subset=['EffSysC'])  # drop rows where EffSysC is NaN

# === SELECT FEATURES AND TARGET ===
features = ['T_Amb', 'GlobHor', 'WindVel']
target = 'EffSysC'

X = df[features]
y = df[target]

# === CREATE AND TRAIN THE SVR MODEL ===
model = SVR(kernel='rbf', C=100, epsilon=0.1)  # Radial basis function kernel
model.fit(X, y)

# === EVALUATION ===
y_pred = model.predict(X)

# Evaluation metrics
mae = mean_absolute_error(y, y_pred)
rmse = np.sqrt(mean_squared_error(y, y_pred))
r2 = r2_score(y, y_pred)

print(f"MAE: {mae:.4f}")
print(f"RMSE: {rmse:.4f}")
print(f"R²: {r2:.4f}")

# === VISUALIZATION ===
# Plotting Actual vs Predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y, y_pred, alpha=0.6)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.xlabel('Actual EffSysC')
plt.ylabel('Predicted EffSysC')
plt.title('SVR Prediction: Actual vs Predicted EffSysC')
plt.grid(True)
plt.show()

# === SAVE THE TRAINED SVR MODEL ===
joblib.dump(model, 'svr_effsysc_model.joblib')

# === PREDICTION FUNCTION ===
# Function to predict EffSysC for a given set of input parameters
def predict_effsysc_svr(T_Amb, GlobHor, WindVel):
    new_data_point = pd.DataFrame({
        'T_Amb': [T_Amb],      # Ambient temperature
        'GlobHor': [GlobHor],  # Global Horizontal irradiance
        'WindVel': [WindVel]   # Wind velocity
    })

    # Predict using the trained SVR model
    prediction = model.predict(new_data_point)[0]

    return prediction

# Example: Make a prediction
T_Amb = 25.0  # Example Ambient temperature
GlobHor = 3   # Example Global Horizontal irradiance
WindVel = 3.5 # Example Wind velocity

predicted_effsysc = predict_effsysc_svr(T_Amb, GlobHor, WindVel)
print(f"Predicted EffSysC using SVR: {predicted_effsysc:.4f}")

"""futur dara prediction"""

# === IMPORTS ===
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import xgboost as xgb
import seaborn as sns

# === STEP 1: LOAD MAIN DATASET ===
df = pd.read_csv('Final data alll.csv')
df = df.dropna(subset=['EffSysC'])  # Drop rows with missing target

# === STEP 2: SELECT FEATURES AND TARGET ===
features = ['T_Amb', 'GlobHor', 'WindVel']
target = 'EffSysC'
X = df[features]
y = df[target]

# === STEP 3: TRAIN/TEST SPLIT ===
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === STEP 4: MODEL SETUP AND TRAINING ===
model = xgb.XGBRegressor(
    objective='reg:squarederror',
    n_estimators=100,
    learning_rate=0.1,
    max_depth=5,
    random_state=42
)
model.fit(X_train, y_train)

# === STEP 5: PREDICTIONS AND EVALUATION ===
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Metrics for training set
print(f"Training set MAE: {mean_absolute_error(y_train, y_train_pred):.4f}")
print(f"Training set RMSE: {np.sqrt(mean_squared_error(y_train, y_train_pred)):.4f}")
print(f"Training set R²: {r2_score(y_train, y_train_pred):.4f}")

# Metrics for test set
print(f"\nTest set MAE: {mean_absolute_error(y_test, y_test_pred):.4f}")
print(f"Test set RMSE: {np.sqrt(mean_squared_error(y_test, y_test_pred)):.4f}")
print(f"Test set R²: {r2_score(y_test, y_test_pred):.4f}")

# === STEP 6: VISUALIZATION ===
plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.scatter(y_train, y_train_pred, alpha=0.6)
plt.plot([y_train.min(), y_train.max()], [y_train.min(), y_train.max()], 'r--')
plt.xlabel('Actual EffSysC')
plt.ylabel('Predicted EffSysC')
plt.title(f'Training Set: Actual vs Predicted\nR² = {r2_score(y_train, y_train_pred):.4f}')
plt.grid(True)

plt.subplot(1, 2, 2)
plt.scatter(y_test, y_test_pred, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel('Actual EffSysC')
plt.ylabel('Predicted EffSysC')
plt.title(f'Test Set: Actual vs Predicted\nR² = {r2_score(y_test, y_test_pred):.4f}')
plt.grid(True)

plt.tight_layout()
plt.show()

# === STEP 7: FEATURE IMPORTANCE ===
plt.figure(figsize=(10, 6))
xgb.plot_importance(model)
plt.title('Feature Importance in XGBoost Model')
plt.tight_layout()
plt.show()

# === STEP 8: CORRELATION HEATMAP ===
corr_matrix = df[features + [target]].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", square=True)
plt.title('Feature Correlation Heatmap')
plt.tight_layout()
plt.show()

# === STEP 9: LOAD FUTURE DATA AND PREDICT ===
future_df = pd.read_csv('future_data.csv')  # Make sure file is in your working dir
future_predictions = model.predict(future_df)

# Print predicted efficiencies
print("\nPredicted EffSysC for future data:")
for i, eff in enumerate(future_predictions, start=1):
    print(f"Day {i}: Predicted EffSysC = {eff:.4f}")

# Save future predictions to CSV
future_df['Predicted_EffSysC'] = future_predictions
future_df.to_csv('future_predictions.csv', index=False)
print("\nPredictions saved to 'future_predictions.csv'")

# === STEP 10: VISUALIZE FUTURE PREDICTIONS ===
plt.figure(figsize=(10, 4))
plt.plot(range(1, len(future_predictions)+1), future_predictions, marker='o')
plt.title('Predicted Solar System Efficiency (EffSysC) Over Future Days')
plt.xlabel('Day')
plt.ylabel('Predicted EffSysC')
plt.grid(True)
plt.xticks(range(1, len(future_predictions)+1))
plt.tight_layout()
plt.show()

target E_grid

# === IMPORTS ===
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import xgboost as xgb
import seaborn as sns

# === STEP 1: LOAD MAIN DATASET ===
df = pd.read_csv('Final data alll.csv')
df = df.dropna(subset=['E_Grid'])  # Drop rows with missing target E_Grid

# === STEP 2: SELECT FEATURES AND TARGET ===
features = ['T_Amb', 'GlobHor', 'WindVel']
target = 'E_Grid'
X = df[features]
y = df[target]

# === STEP 3: TRAIN/TEST SPLIT ===
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === STEP 4: MODEL SETUP AND TRAINING ===
model = xgb.XGBRegressor(
    objective='reg:squarederror',
    n_estimators=100,
    learning_rate=0.1,
    max_depth=5,
    random_state=42
)
model.fit(X_train, y_train)

# === STEP 5: PREDICTIONS AND EVALUATION ===
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Metrics for training set
print(f"Training set MAE: {mean_absolute_error(y_train, y_train_pred):.4f}")
print(f"Training set RMSE: {np.sqrt(mean_squared_error(y_train, y_train_pred)):.4f}")
print(f"Training set R²: {r2_score(y_train, y_train_pred):.4f}")

# Metrics for test set
print(f"\nTest set MAE: {mean_absolute_error(y_test, y_test_pred):.4f}")
print(f"Test set RMSE: {np.sqrt(mean_squared_error(y_test, y_test_pred)):.4f}")
print(f"Test set R²: {r2_score(y_test, y_test_pred):.4f}")

# === STEP 6: VISUALIZATION ===
plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.scatter(y_train, y_train_pred, alpha=0.6)
plt.plot([y_train.min(), y_train.max()], [y_train.min(), y_train.max()], 'r--')
plt.xlabel(f'Actual {target}')
plt.ylabel(f'Predicted {target}')
plt.title(f'Training Set: Actual vs Predicted\nR² = {r2_score(y_train, y_train_pred):.4f}')
plt.grid(True)

plt.subplot(1, 2, 2)
plt.scatter(y_test, y_test_pred, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel(f'Actual {target}')
plt.ylabel(f'Predicted {target}')
plt.title(f'Test Set: Actual vs Predicted\nR² = {r2_score(y_test, y_test_pred):.4f}')
plt.grid(True)

plt.tight_layout()
plt.show()

# === STEP 7: FEATURE IMPORTANCE ===
plt.figure(figsize=(10, 6))
xgb.plot_importance(model)
plt.title('Feature Importance in XGBoost Model')
plt.tight_layout()
plt.show()

# === STEP 8: CORRELATION HEATMAP ===
corr_matrix = df[features + [target]].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", square=True)
plt.title('Feature Correlation Heatmap')
plt.tight_layout()
plt.show()

# === STEP 9: LOAD FUTURE DATA AND PREDICT ===
future_df = pd.read_csv('future_data.csv')  # Make sure this file contains only feature columns without predictions
future_df = future_df[features]  # Ensure only features are passed

future_predictions = model.predict(future_df)

# Print predicted values
print(f"\nPredicted {target} for future data:")
for i, val in enumerate(future_predictions, start=1):
    print(f"Day {i}: Predicted {target} = {val:.4f}")

# Save future predictions to CSV (features + predictions)
future_df[f'Predicted_{target}'] = future_predictions
future_df.to_csv('future_predictions.csv', index=False)
print(f"\nPredictions saved to 'future_predictions.csv'")

# === STEP 10: VISUALIZE FUTURE PREDICTIONS ===
plt.figure(figsize=(10, 4))
days = range(1, len(future_predictions) + 1)
plt.plot(days, future_predictions, marker='o')
plt.title(f'Predicted {target} Over Future Days')
plt.xlabel('Day')
plt.ylabel(f'Predicted {target}')
plt.grid(True)
plt.xticks(days)
plt.tight_layout()
plt.show()